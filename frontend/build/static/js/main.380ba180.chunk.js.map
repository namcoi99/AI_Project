{"version":3,"sources":["components/TableRow.jsx","components/FormTable.jsx","App.js","reportWebVitals.js","index.js"],"names":["TableRow","id","attributes","marks","handleMark","RadioItems","item","row","col","index","length","className","type","name","value","checked","onChange","event","target","htmlFor","radioItems","map","attr","scope","FormTable","useState","setMarks","undefined","setName","copyMarks","console","log","tableRow","criteriaData","criterion","attrItems","onSubmit","preventDefault","result","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.380ba180.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction TableRow({ id, attributes, marks, handleMark }) {\r\n    const RadioItems = ({ item }) => {\r\n        let row = id - 1;\r\n        let col = item.id - 1;\r\n        let index = row * attributes.length + col;\r\n        return (\r\n            <td>\r\n                <div className=\"form-check\">\r\n                    <input className=\"form-check-input\" type=\"radio\" name={`mark${index}`} id={`mark${index}`} value={1} checked={marks[index] == 1} onChange={event => handleMark(index, event.target.value)} />\r\n                    <label className=\"form-check-label\" htmlFor={`${item.name}1`}>1</label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                    <input className=\"form-check-input\" type=\"radio\" name={`mark${index}`} id={`mark${index}`} value={2} checked={marks[index] == 2} onChange={event => handleMark(index, event.target.value)} />\r\n                    <label className=\"form-check-label\" htmlFor={`${item.name}2`}>2</label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                    <input className=\"form-check-input\" type=\"radio\" name={`mark${index}`} id={`mark${index}`} value={3} checked={marks[index] == 3} onChange={event => handleMark(index, event.target.value)} />\r\n                    <label className=\"form-check-label\" htmlFor={`${item.name}3`}>3</label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                    <input className=\"form-check-input\" type=\"radio\" name={`mark${index}`} id={`mark${index}`} value={4} checked={marks[index] == 4} onChange={event => handleMark(index, event.target.value)} />\r\n                    <label className=\"form-check-label\" htmlFor={`${item.name}4`}>4</label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                    <input className=\"form-check-input\" type=\"radio\" name={`mark${index}`} id={`mark${index}`} value={5} checked={marks[index] == 5} onChange={event => handleMark(index, event.target.value)} />\r\n                    <label className=\"form-check-label\" htmlFor={`${item.name}5`}>5</label>\r\n                </div>\r\n            </td>\r\n        )\r\n    }\r\n    const radioItems = attributes.map(attr => (\r\n        <RadioItems key={attr.id} item={attr} />\r\n    ))\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{id}</th>\r\n            {radioItems}\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TableRow;","import React, { useEffect, useState } from 'react';\r\nimport TableRow from './TableRow';\r\nimport criteriaData from '../data/criteria.json'\r\nimport attributes from '../data/attributes.json';\r\n\r\nfunction FormTable() {\r\n    const [marks, setMarks] = useState([])\r\n    const [name, setName] = useState(undefined)\r\n\r\n    const handleMark = (index, value) => {\r\n        let copyMarks = [...marks];\r\n        copyMarks[index] = value;\r\n        console.log(index + \": \" + value)\r\n        setMarks(copyMarks);\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const result = {\r\n            name: name,\r\n            marks: marks,\r\n            row: criteriaData.length,\r\n            col: attributes.length\r\n        }\r\n        console.log(result)\r\n    }\r\n\r\n    const handleName = (event) => {\r\n        setName(event.target.value)\r\n    }\r\n\r\n    const tableRow = criteriaData.map(criterion => (\r\n        <TableRow key={criterion.id} id={criterion.id} attributes={attributes} marks={marks} handleMark={handleMark} />\r\n    ))\r\n    const attrItems = attributes.map(attr => (\r\n        <th scope=\"col\" key={attr.name}>{attr.name}</th>\r\n    ))\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type='text' placeholder=\"Enter your name...\" onChange={handleName} />\r\n            <table className=\"table table-bordered\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">The criteria</th>\r\n                        {attrItems}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tableRow}\r\n                </tbody>\r\n            </table>\r\n            <button type=\"submit\" className=\"btn btn-primary\" >Submit</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default FormTable;","import './App.css';\nimport FormTable from './components/FormTable';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <FormTable/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}