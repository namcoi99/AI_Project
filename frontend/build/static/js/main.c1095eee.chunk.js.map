{"version":3,"sources":["components/TableRow.jsx","components/FormTable.jsx","App.js","reportWebVitals.js","index.js"],"names":["TableRow","criterion","attributes","marks","handleMark","RadioItems","item","row","id","col","index","length","className","type","name","value","checked","onChange","event","target","htmlFor","radioItems","map","attr","scope","FormTable","expertNum","web","useState","setMarks","setName","count","setCount","copyMarks","console","log","tableRow","criteriaData","attrItems","onClick","max","preventDefault","randomArray","Array","fill","Math","ceil","random","generateRandArr","onSubmit","includes","undefined","alert","result","website","window","location","reload","placeholder","required","App","setNum","registered","setRegistered","setWeb","min","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1095eee.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction TableRow({ criterion, attributes, marks, handleMark }) {\r\n    const RadioItems = ({ item }) => {\r\n        let row = criterion.id - 1;\r\n        let col = item.id - 1;\r\n        let index = row * attributes.length + col;\r\n        return (\r\n            <td>\r\n                <div className=\"form-check\">\r\n                    <input className=\"form-check-input\" type=\"radio\" name={`mark${index}`} id={`mark${index}`} value={1} checked={marks[index] == 1} onChange={event => handleMark(index, event.target.value)} />\r\n                    <label className=\"form-check-label\" htmlFor={`${item.name}1`}>1</label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                    <input className=\"form-check-input\" type=\"radio\" name={`mark${index}`} id={`mark${index}`} value={2} checked={marks[index] == 2} onChange={event => handleMark(index, event.target.value)} />\r\n                    <label className=\"form-check-label\" htmlFor={`${item.name}2`}>2</label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                    <input className=\"form-check-input\" type=\"radio\" name={`mark${index}`} id={`mark${index}`} value={3} checked={marks[index] == 3} onChange={event => handleMark(index, event.target.value)} />\r\n                    <label className=\"form-check-label\" htmlFor={`${item.name}3`}>3</label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                    <input className=\"form-check-input\" type=\"radio\" name={`mark${index}`} id={`mark${index}`} value={4} checked={marks[index] == 4} onChange={event => handleMark(index, event.target.value)} />\r\n                    <label className=\"form-check-label\" htmlFor={`${item.name}4`}>4</label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                    <input className=\"form-check-input\" type=\"radio\" name={`mark${index}`} id={`mark${index}`} value={5} checked={marks[index] == 5} onChange={event => handleMark(index, event.target.value)} />\r\n                    <label className=\"form-check-label\" htmlFor={`${item.name}5`}>5</label>\r\n                </div>\r\n            </td>\r\n        )\r\n    }\r\n    const radioItems = attributes.map(attr => (\r\n        <RadioItems key={attr.id} item={attr} />\r\n    ))\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{criterion.name}</th>\r\n            {radioItems}\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TableRow;","import React, { useEffect, useState } from 'react';\r\nimport TableRow from './TableRow';\r\nimport criteriaData from '../data/criteria.json'\r\nimport attributes from '../data/attributes.json';\r\n\r\nfunction FormTable({ expertNum, web }) {\r\n    const [marks, setMarks] = useState([])\r\n    const [name, setName] = useState('')\r\n    const [count, setCount] = useState(1)\r\n\r\n    const handleMark = (index, value) => {\r\n        let copyMarks = [...marks];\r\n        copyMarks[index] = value;\r\n        console.log(index + \": \" + value)\r\n        setMarks(copyMarks);\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (marks.includes(undefined) || marks.length !== criteriaData.length * attributes.length) {\r\n            console.log(marks.length)\r\n            console.log(criteriaData.length * attributes.length)\r\n            alert(\"Please fill all marks!!!\")\r\n        } else {\r\n            const result = {\r\n                name: name,\r\n                marks: marks,\r\n                website: web,\r\n                row: criteriaData.length,\r\n                col: attributes.length\r\n            }\r\n\r\n            // call api\r\n            //\r\n            //\r\n            //\r\n\r\n            setName('')\r\n            setMarks([])\r\n            alert(`Thanks expert ${name}`)\r\n            if (count >= expertNum) {\r\n                alert(\"Evaluation completed!\")\r\n                window.location.reload()\r\n            } else {\r\n                setCount(count + 1)\r\n            }\r\n            console.log(result)\r\n        }\r\n    }\r\n\r\n    const handleName = (event) => {\r\n        setName(event.target.value)\r\n    }\r\n\r\n    const generateRandArr = (event, length, max) => {\r\n        event.preventDefault()\r\n        let randomArray = Array(length).fill().map(() => Math.ceil(Math.random() * max));\r\n        setMarks(randomArray)\r\n        console.log(marks)\r\n    }\r\n\r\n    const tableRow = criteriaData.map(criterion => (\r\n        <TableRow key={criterion.id} criterion={criterion} attributes={attributes} marks={marks} handleMark={handleMark} />\r\n    ))\r\n    const attrItems = attributes.map(attr => (\r\n        <th scope=\"col\" key={attr.name}>{attr.name}</th>\r\n    ))\r\n\r\n    return (\r\n        <div>\r\n            <button type=\"submit\" onClick={event => generateRandArr(event, 36, 5)}>Auto fill</button>\r\n            <h2 className=\"text-center\">Website: {web}</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <table className=\"table table-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">The criteria</th>\r\n                            {attrItems}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {tableRow}\r\n                    </tbody>\r\n                </table>\r\n                <div>\r\n                    <label htmlFor=\"expertName\" className=\"form-label\">Enter your name*(Expert {count})</label>\r\n                    <input className=\"form-control\" type=\"text\" id=\"expertName\" placeholder=\"Enter your name...\" value={name} required onChange={handleName} />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\" >Submit</button>\r\n            </form>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default FormTable;","import { useState } from 'react';\r\nimport './App.css';\r\nimport FormTable from './components/FormTable';\r\n\r\nfunction App() {\r\n  const [expertNum, setNum] = useState(0)\r\n  const [registered, setRegistered] = useState(false)\r\n  const [web, setWeb] = useState(undefined)\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n\r\n    if (expertNum >= 0) {\r\n      setRegistered(true)\r\n    }\r\n\r\n    console.log(expertNum + web)\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"text-center\">Evaluating Educational Websites</h1>\r\n      {registered === false ? (\r\n        <form onSubmit={handleSubmit}>\r\n          <label htmlFor=\"expertNum\" className=\"form-label\">Enter number of experts</label>\r\n          <input type=\"number\" id=\"expertNum\" className=\"form-control\" required min=\"1\" onChange={(event) => setNum(event.target.value)} />\r\n          <label htmlFor=\"website\" className=\"form-label\">Enter website</label>\r\n          <input type=\"text\" id=\"website\" className=\"form-control\" required onChange={(event) => setWeb(event.target.value)} />\r\n          <button className=\"btn btn-primary\" type=\"submit\" >Submit</button>\r\n        </form>\r\n      ) : (\r\n          <FormTable expertNum={expertNum} web={web}/>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}